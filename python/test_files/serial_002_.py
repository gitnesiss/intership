# 2024-12-21
# Считываем с COM-порта данные к которому подключен ардуино со скетчем, 
# который можно посмотреть в конце этой программы.
# Считывание происходит построчно и записывается в переменную в виде обычной строки.
# 

import serial

# Конфигурация COM-порта.
port = "COM5"  # Заменить на соответствующее имя COM-порта.
baudrate = 9600

try:
    # Открытие COM-порта.
    ser = serial.Serial(port, baudrate=baudrate)
    print("Последовательное соединение установлено.")

    # Чтение данных с Arduino
    # Бесконечный цикл while True: предназначен для постоянного чтения данных
    # из последовательного порта.
    while True:
        # Прочитать строку данных из последовательного порта
        # Каждая строка данных читается методом readline() и
        # преобразуется в строку (decode()). Затем удаляются
        # лишние пробелы и символы новой строки (strip()).
        line = ser.readline().decode().strip()

        # Если строка не пустая, она выводится на экран с префиксом "Received:" (получено).
        if line:
            print("Получено:", line)

# Этот блок обрабатывает исключения типа SerialException. Если возникает ошибка
# при работе с последовательным портом, будет выведено сообщение об ошибке.
except serial.SerialException as se:
    print("Ошибка последовательного порта:", str(se))

# Обработка прерывания клавиатуры
# Этот блок обрабатывает прерывание программы пользователем (например, нажатием
# комбинации клавиш Ctrl+C). При таком прерывании программа просто завершает
# выполнение без вывода сообщений об ошибках.
except KeyboardInterrupt:
    pass

# Наконец, в блоке finally закрывается соединение с последовательным портом,
# если оно было открыто. Этот блок выполняется независимо от того, возникло
# исключение или нет. После закрытия соединения выводится сообщение
# "Serial connection closed." ("Последовательное соединение закрыто.").
finally:
    # Закрываем последовательное соединение
    if ser.is_open:
        ser.close()
        print("Последовательное соединение закрыто.")







#/* 
# * Программа для работы с дисплеем и получение/отправление данных 
# * от программы с кодом написанным на Python с использованием
# * библиотеки PySerial.
# */
#
##include <GyverOLED.h>
#
#// Используем буфер на стороне контроллера
##define OLED_SOFT_BUFFER_64
#
#// Выбор настройки для дисплея
#GyverOLED<SSH1106_128x64> oled;
#
#void setup() {
#  delay(50);
#  pinMode(13, OUTPUT);
#  Serial.begin(9600);
#}
#
#void loop() {
#  Serial.println("click");
#  digitalWrite(13, HIGH);
#  delay(500);
#  Serial.println("-");
#  digitalWrite(13, LOW);
#  delay(500);
#  Serial.println("clack");
#  digitalWrite(13, HIGH);
#  delay(500);
#  for (int i = 0; i < 5; i++) {
#    Serial.println("click-clack");
#    delay(50);
#    Serial.println("           ");
#    delay(50);
#  }
#}
